name: Build and Push Docker Images

on:
  # push:
  #   branches:
  #     - ci-cd
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: terraform destroy
        run: |
            terraform init -reconfigure
        working-directory: ./Terraform

      # - name: Terraform Init
      #   run: terraform -chdir=./Terraform init 

      - name: Terraform Validate
        run: terraform -chdir=./Terraform validate
      
#      - name: Terraform Import CSI Driver
#        run: terraform -chdir=./Terraform import module.eks.aws_eks_addon.ebs_csi_driver voting-app-0123:aws-ebs-csi-driver


      - name: Terraform Plan
        run: terraform -chdir=./Terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: terraform -chdir=./Terraform apply -auto-approve -var-file=terraform.tfvars

  # unit_testing: 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install dependencies (phantomjs, curl, bash)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y phantomjs curl
          
  #     - name: Give execute permission for test script
  #       run: chmod +x ./result/tests/tests.sh

  #     - name: Run result service tests
  #       run: ./tests.sh
  #       working-directory: ./result/tests


  docker:
    needs: [terraform]
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        service: [vote, result, worker]  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
  
      - name: Build and Push ${{ matrix.service }}
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest ./${{ matrix.service }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name voting-app-0123 --region ${{ secrets.AWS_REGION }}

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f k8s/.

      - name: Verify all pods are running
        run: |
          kubectl get pods
          
      # - name: Describe Pods
      #   run: |
      #     kubectl describe pod redis-596c7668df-gq5dt
      #     kubectl describe pod result-6498f7d64c-zw6fh
      #     kubectl describe pod vote-5f7fd588d-447t8
      #     kubectl describe pod worker-546fc8cc65-g48dz
          
      - name: Wait for deployments to roll out
        run: |
          kubectl rollout status deployment/vote --timeout=1800s
          kubectl rollout status deployment/worker --timeout=1800s
          kubectl rollout status deployment/redis --timeout=180s
          kubectl rollout status deployment/result --timeout=180s
          kubectl rollout status deployment/postgres --timeout=180s

      - name: Verify all pods are running
        run: |
          kubectl get pods

      - name: Get service details
        run: kubectl get svc -n default

