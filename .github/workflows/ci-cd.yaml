name: Build, Deploy, and Manage EKS Infra

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destroy infrastructure? (yes/no)"
        required: true
        default: "no"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./Terraform

      - name: Terraform Apply/Destroy
        run: |
          if [ "${{ github.event.inputs.destroy }}" = "yes" ]; then
            terraform init -reconfigure
            terraform destroy -auto-approve
          else
            terraform apply -auto-approve
          fi
        working-directory: ./Terraform

  wait-for-cluster:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy == 'no'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for EKS cluster kubeconfig
        run: |
          for i in {1..10}; do
            aws eks update-kubeconfig --name voting-app-3030 --region ${{ secrets.AWS_REGION }} && break || sleep 30
          done

  docker:
    needs: [wait-for-cluster]
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        service: [vote, result, worker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push ${{ matrix.service }}
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          TAG=${{ github.sha }}
          docker build -t $IMAGE:$TAG ./${{ matrix.service }}
          docker push $IMAGE:$TAG

  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name voting-app-3030 --region ${{ secrets.AWS_REGION }}

      - name: Deploy AWS Load Balancer Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=voting-app-3030 \
            --set serviceAccount.create=true \
            --set region=${{ secrets.AWS_REGION }}

      - name: Deploy Kubernetes Manifests
        run: kubectl apply -f k8s/.

      - name: Verify Deployments Rollout
        run: kubectl rollout status deployment --all -n default

      - name: Get Service Details
        run: kubectl get svc -n default
